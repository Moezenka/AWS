AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Description: Enter Environment Name. NO CAPS
    Default: vahebi
    Type: String
    AllowedPattern: '[a-z0-9]*$'
    ConstraintDescription: No CAPS.
  Subnet1:
    Default: subnet-01e3a449
    Description: Select Subnet
    AllowedValues:
      - subnet-01e3a449
    Type: String
  Subnet2:
    Default: subnet-5d4dfc07
    AllowedValues:
      - subnet-5d4dfc07
    Description: Select Subnet
    Type: String
  Subnet3:
    Default: subnet-62423504
    Description: Select Subnet
    AllowedValues:
      - subnet-62423504
    Type: String
  KeyName:
    Description: Select SSH Key.
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: MyLoginKey
  MyFirstVPC:
    Default: vpc-ecc3f98a
    Description: Select VPC.
    Type: 'AWS::EC2::VPC::Id'
  SSHLocation:
    Description: SSH CIDR
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.16.0.0/12
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: 'Ogiltigt, format: x.x.x.x/x.'
  OperatorEmail:
    Description: Epost fÃ¶r Alarm
    Default: moevahebi@gmail.com
    Type: String
Resources:
  RDS:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: false
      AllocatedStorage: 20
      BackupRetentionPeriod: 7
      Iops: 0
      MonitoringInterval: 0
      Port: 3306
      DBInstanceClass: db.t2.micro
      DBName: !Sub '${EnvironmentName}wordpressdb'
      DBInstanceIdentifier: !Sub '${EnvironmentName}-wordpressdb'
      DBParameterGroupName: default.mariadb10.2
      DBSubnetGroupName: default
      Engine: mariadb
      EngineVersion: 10.2.21
      LicenseModel: general-public-license
      MasterUserPassword: wordpresspassword
      MasterUsername: wordpressuser
      OptionGroupName: 'default:mariadb-10-2'
      StorageType: GP2
      VPCSecurityGroups:
        - Ref: DBSG
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    DependsOn:
    - RDS
    Properties:
      FileSystemTags:
      - Key: Name
        Value: !Sub '${EnvironmentName}-wpefs'
      PerformanceMode: generalPurpose
      Encrypted: false
      ThroughputMode: bursting
  EFSMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    DependsOn:
    - EFSFileSystem
    - DBSG
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet1
      SecurityGroups:
        - !Ref NFSSG
  EFSMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    DependsOn:
    - EFSFileSystem
    - DBSG
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet2
      SecurityGroups:
        - !Ref NFSSG
  EFSMountTarget3:
    Type: 'AWS::EFS::MountTarget'
    DependsOn:
    - EFSFileSystem
    - DBSG
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet3
      SecurityGroups:
        - !Ref NFSSG
  WordpressASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - RDS
    Properties:
      AutoScalingGroupName: !Sub '${EnvironmentName}-ASG'
      TargetGroupARNs:
        - !Ref ASGTG
      LaunchConfigurationName: !Ref ASGLC
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-WP-ASG'
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ASGTG
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
    - RDS
    Properties:
      Name: !Sub '${EnvironmentName}-ALB'
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      SecurityGroups:
        - !Ref HTTPSG
  HTTPSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}HTTP-SG'
  SSHSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.16.0.0/12
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 172.16.0.0/12
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}SSHinternal-SG'
  ICMPSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ICMP-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 172.16.0.0/12
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}ICMP-SG'
  NFSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: NFS-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 172.16.0.0/12
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 172.16.0.0/12
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}NFS-SG'
  WordpressInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
     - RDS
     - EFSMountTarget1
     - EFSMountTarget2
     - EFSMountTarget3
     - EFSFileSystem
     - ALB
    Properties:
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Mount EFS
          yum update -y
          yum install amazon-efs-utils -y
          mkdir -p /var/www/html/wp-content
          DIR_SRC=${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com
          echo -e "$DIR_SRC:/ /var/www/html/wp-content nfs defaults 0 0" | tee -a /etc/fstab
          mount -a
          rm -rf tee
          # INSTALL WP - EDIT DBNAME
          yum install -y httpd php-mysqlnd
          amazon-linux-extras install -y php7.2
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          yum install php-mbstring -y
          systemctl restart httpd
          systemctl restart php-fpm
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          rm -rf latest.tar.gz
          cp wordpress/wp-config-sample.php wordpress/wp-config.php
          sed -i "s/define( 'DB_NAME', 'database_name_here' );/define( 'DB_NAME', '${EnvironmentName}wordpressdb' );/g " wordpress/wp-config.php
          sed -i "s/define( 'DB_USER', 'username_here' );/define( 'DB_USER', 'wordpressuser' );/g " wordpress/wp-config.php
          sed -i "s/define( 'DB_PASSWORD', 'password_here' );/define( 'DB_PASSWORD', 'wordpresspassword' );/g " wordpress/wp-config.php
          sed -i "s/localhost/${RDS.Endpoint.Address}/g" wordpress/wp-config.php
          curl https://api.wordpress.org/secret-key/1.1/salt/ > salt.txt
          sed -i '49,56d' wordpress/wp-config.php
          sed -i '51r salt.txt' wordpress/wp-config.php 
          rm -rf salt.txt
          rm -rf tee
          cp -r wordpress/* /var/www/html/
          rm -rf wordpress
          sed -i '151s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
          chown -R apache /var/www
          chgrp -R apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          systemctl restart httpd
          systemctl enable php-fpm
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp
          cd /var/www/html
          EC2HOSTNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname`
          wp core install --url=$EC2HOSTNAME --title=MohsenWPTitle --admin_user=wordpressuser --admin_password=wordpresspassword --admin_email=wordpress@vahebi.se
          wp theme activate twentyseventeen
      SecurityGroupIds:
        - !Ref DBSG
        - !Ref NFSSG
        - !Ref HTTPSG
        - !Ref SSHSecureSG
      InstanceType: t2.micro
      ImageId: ami-030dbca661d402413
      SubnetId: !Ref Subnet1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2-WP'
  DBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyFirstVPC
      GroupDescription: DB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}DB-SG'
  ASGTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Sub '${EnvironmentName}-ALB-TG'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyFirstVPC
      Targets:
        - Id: !Ref WordpressInstance
  ASGLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn:
      - WordpressInstance
    Properties:
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          # INSTALL WP - EDIT DBNAME
          yum install -y httpd php-mysqlnd
          amazon-linux-extras install -y php7.2
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          yum install php-mbstring -y
          systemctl restart httpd
          systemctl restart php-fpm
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          rm -rf latest.tar.gz
          cp wordpress/wp-config-sample.php wordpress/wp-config.php
          sed -i "s/define( 'DB_NAME', 'database_name_here' );/define( 'DB_NAME', '${EnvironmentName}wordpressdb' );/g " wordpress/wp-config.php
          sed -i "s/define( 'DB_USER', 'username_here' );/define( 'DB_USER', 'wordpressuser' );/g " wordpress/wp-config.php
          sed -i "s/define( 'DB_PASSWORD', 'password_here' );/define( 'DB_PASSWORD', 'wordpresspassword' );/g " wordpress/wp-config.php
          sed -i "s/localhost/${RDS.Endpoint.Address}/g" wordpress/wp-config.php
          curl https://api.wordpress.org/secret-key/1.1/salt/ > salt.txt
          sed -i '49,56d' wordpress/wp-config.php
          sed -i '51r salt.txt' wordpress/wp-config.php 
          rm -rf salt.txt
          rm -rf tee
          cp -r wordpress/* /var/www/html/
          rm -rf wordpress
          sed -i '151s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
          chown -R apache /var/www
          chgrp -R apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          systemctl restart httpd
          systemctl enable php-fpm
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp
          cd /var/www/html
          EC2HOSTNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname`
          wp core install --url=$EC2HOSTNAME --title=MohsenWPTitle --admin_user=wordpressuser --admin_password=wordpresspassword --admin_email=wordpress@vahebi.se
          wp theme activate twentyseventeen
          # Mount EFS
          yum install amazon-efs-utils -y
          rm -rf /var/www/html/wp-content/*
          DIR_SRC=${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com
          echo -e "$DIR_SRC:/ /var/www/html/wp-content nfs defaults 0 0" | tee -a /etc/fstab
          mount -a
          rm -rf tee
          systemctl restart httpd
          systemctl enable php-fpm
      ImageId: ami-030dbca661d402413
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            SnapshotId: snap-0e2339b3e84c98fcd
            VolumeType: gp2
      EbsOptimized: false
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Sub '${EnvironmentName}-ASG-LC'
      SecurityGroups:
        - !Ref DBSG
        - !Ref NFSSG
        - !Ref HTTPSG
        - !Ref SSHSecureSG
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            "/tmp/cwlogs/sshaccess.conf":
              content: !Sub |
                [general]
                state_file= /var/awslogs/agent-state
                [/var/log/secure]
                file = /var/log/secure
                log_group_name = ${SSHLogGroup}
                log_stream_name = {instance_id}/ssh.log
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000400'
              owner: "root"
              group: "root"
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionInstance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
    Properties:
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            # Starta cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r BastionInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2
            instance metadata /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # Get the CloudWatch Logs agent
            wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            # Install the CloudWatch Logs agent
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/sshaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BastionInstance --region ${AWS::Region}
      SecurityGroupIds:
        - !Ref SSHSG
        - !Ref ICMPSG
      InstanceType: t2.micro
      ImageId: ami-bff32ccc
      SubnetId: !Ref Subnet1
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2-BASTION'
  LogRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: LogRole
  LogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:Create*'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  InvalidUserAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: The number of invalid users is greater than 2 over 1 minutes
      MetricName: sshInvalidUser
      Namespace: SSH
      Statistic: Sum
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '2'
      AlarmActions:
        - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanThreshold
  SSHReceiveddisconnectAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: The number disconnect requests is greater then 10 in 5 minutes
      MetricName: sshDisconnect
      Namespace: SSH
      Statistic: Sum
      Period: '60'
      EvaluationPeriods: '5'
      Threshold: '10'
      AlarmActions:
        - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanThreshold
  AlarmNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint:
            Ref: OperatorEmail
          Protocol: email
  SSHLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  SSHReceiveddisconnect:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: SSHLogGroup
      FilterPattern: '[Mon, day, timestamp, ip, id, msg1, msg2 = disconnect, ...]'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: SSH
          MetricName: sshDisconnect
  InvalidUser:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: SSHLogGroup
      FilterPattern: '[Mon, day, timestamp, ip, id, status = Invalid, ...]'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: SSH
          MetricName: sshInvalidUser
  BadSSHKey:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: SSHLogGroup
      FilterPattern: '[Mon, day, timestamp, ip, id, msg1= Connection, msg2 = closed, ...]'
      MetricTransformations:
        - MetricValue: '3'
          MetricNamespace: SSH
          MetricName: BadSSHKey
  SSHSecureSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyFirstVPC
      GroupDescription: SSH From Bastion
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}SSHSecure-SG'
  SSHEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
      - SSHSG
      - SSHSecureSG
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - SSHSecureSG
        - GroupId
      GroupId:
        Fn::GetAtt:
        - SSHSG
        - GroupId
  SSHIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - SSHSG
      - SSHSecureSG
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::GetAtt:
        - SSHSG
        - GroupId
      GroupId:
        Fn::GetAtt:
        - SSHSecureSG
        - GroupId
Outputs: 
    RDSDB:
        Value: !GetAtt RDS.Endpoint.Address
    LBDNS:
        Value: !GetAtt ALB.DNSName
    InstanceId:
        Description: BastionInstance ID
        Value:
            Ref: BastionInstance
    PublicIP1:
        Description: Publika IP Bastion Host
        Value: !GetAtt BastionInstance.PublicIp
    CloudWatchLogGroupName:
        Description: Cloudwatch Log Gruppen
        Value: !Ref SSHLogGroup
