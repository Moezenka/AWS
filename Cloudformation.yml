AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Description: Enter Environment Name. NO CAPS
    Default: vahebi
    Type: String
    AllowedPattern: '[a-z0-9]*$'
  Subnet1:
    Default: subnet-01e3a449
    Description: Select Subnet
    AllowedValues:
      - subnet-01e3a449
    Type: String
  Subnet2:
    Default: subnet-5d4dfc07
    AllowedValues:
      - subnet-5d4dfc07
    Description: Select Subnet
    Type: String
  Subnet3:
    Default: subnet-62423504
    Description: Select Subnet
    AllowedValues:
      - subnet-62423504
    Type: String
  KeyName:
    Description: Select SSH Key.
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: MyLoginKey
  AZ1:
    Default: subnet-01e3a449
    Description: Select Subnet
    Type: 'AWS::EC2::Subnet::Id'
  AZ2:
    Default: subnet-5d4dfc07
    Description: Select Subnet
    Type: 'AWS::EC2::Subnet::Id'
  MyFirstVPC:
    Default: vpc-ecc3f98a
    Description: Select VPC.
    Type: 'AWS::EC2::VPC::Id'
Resources:
  asgPRODNginxASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub '${EnvironmentName}-ASG'
      TargetGroupARNs:
        - !Ref ELBV2TGFZ9K
      LaunchConfigurationName: !Ref ASLC29GY9
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PROD-Nginx'
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4002e66e-e565-4c6d-9328-3eb2f3001eb1
  s3vahebinginxs3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${EnvironmentName}-bucket'
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: '30'
            Prefix: Glacier
            Id: !Sub '${EnvironmentName}-bucket-LCRule'
            Status: Enabled
            Transitions:
              - TransitionInDays: '15'
                StorageClass: Glacier
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2e8c79ed-a0d9-446c-8839-5bb347dfd0f6
  EC2SG1YR0R:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: DEV-ALB-HTTP-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.16.0.0/12
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}DEV-ALB-SSHinternal-HTTP-SG'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 58cf82e5-e9fe-43da-b3e4-1324dc9f37aa
  ELBV2TG35035:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Sub '${EnvironmentName}-DEV-ALB-TG'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyFirstVPC
      Targets:
        - Id: !Ref EC2I30NTR
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cb8f9697-3a09-4939-a665-28ac1c768c73
  ELBV2L2XUEG:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ELBV2LB1Q5UY
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBV2TG35035
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8c590673-934d-491a-a6d8-7a6ce333ebdd
  ELBV2LB1Q5UY:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${EnvironmentName}-DEV-ALB'
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application
      Subnets:
        - !Ref AZ1
        - !Ref AZ2
        - !Ref Subnet3
      SecurityGroups: 
        - !Ref EC2SG1YR0R
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 96ed2431-b4fc-4e2e-bd70-546bd1dcde48
  EC2SG48E23:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: DEV-HTTP-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}DEV-SSHinternal-HTTP-SG'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 87dc0c75-9722-4205-8d8c-7db6a5058340
  EC2I30NTR:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64':
          'Fn::Sub':
          -  |
           #!/bin/bash
           yum update -y
           systemctl enable yum-cron
           systemctl restart yum-cron
           echo "*/5 * * * * root aws s3 sync --delete /usr/share/nginx/html s3://${S3Bucket} " >> /etc/crontab
           systemctl restart crond
           aws s3 sync --delete /usr/share/nginx/html s3://${S3Bucket}
          - S3Bucket: !GetAtt s3vahebinginxs3.Arn
      LaunchTemplate:
        LaunchTemplateId: lt-0fe5a315510b32767
        Version: 2
      SecurityGroupIds:
        - !Ref EC2SG48E23
      InstanceType: t2.micro
      SubnetId: !Ref Subnet1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DEV-Nginx'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c6870ea7-aab5-407c-b61b-a5fe9184cbb0
  EC2SG3AFUT:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MyFirstVPC
      GroupDescription: HTTP-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PROD-HTTP-SG'
  ELBV2LB1XFPI:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${EnvironmentName}-PROD-ALB'
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application
      Subnets:
        - !Ref AZ1
        - !Ref AZ2
        - !Ref Subnet3
      SecurityGroups:
        - !Ref EC2SG244U0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f32795eb-2d2e-434b-a9f0-fd9c974122c3
  ELBV2TGFZ9K:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Sub '${EnvironmentName}-PROD-ALB-TG'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyFirstVPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8fd98ae5-c845-4684-9641-f3ff8eb3b710
  EC2SG244U0:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ALB-HTTP-SG
      VpcId: !Ref MyFirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PROD-LB-HTTP-SG'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7ce7f538-924a-4b8b-92b3-dab4d529a06a
  ELBV2L4DS6P:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ELBV2LB1XFPI
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBV2TGFZ9K
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c25c1819-8892-4aa8-93e6-c2ee4185014f
  ASLC29GY9:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      UserData:
        'Fn::Base64':
          'Fn::Sub':
            -  |
             #!/bin/bash
             yum update -y
             amazon-linux-extras install nginx1.12 -y
             mv /usr/share/nginx/html/index.html /usr/share/nginx/html/backupindex.html
             touch /usr/share/nginx/html/index.html
             echo "<html><H1>Mohsen</H1></html>" >/usr/share/nginx/html/index.html
             yum install yum-cron -y
             yum install stress -y
             systemctl enable yum-cron
             systemctl restart yum-cron
             sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/yum/yum-cron.conf
             systemctl enable nginx
             systemctl restart nginx
             echo "*/5 * * * * root aws s3 sync --delete s3://${S3Bucket} /usr/share/nginx/html" >> /etc/crontab
             systemctl restart crond
             aws s3 sync --delete s3://${S3Bucket} /usr/share/nginx/html
            - S3Bucket: !GetAtt s3vahebinginxs3.Arn
      ImageId: ami-030dbca661d402413
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            SnapshotId: snap-0e2339b3e84c98fcd
            VolumeType: gp2
      EbsOptimized: false
      IamInstanceProfile: EC2-S3ReadAccess
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Sub '${EnvironmentName}-ASG-LC'
      SecurityGroups:
        - !Ref EC2SG3AFUT
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d9b37cdc-4d00-4964-ad66-6501fe75d5fe
